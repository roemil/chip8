// stack stores addresses (16 bit ints)

// 2 registers of 1 byte each. If they are non-zero they are decremented every second


/* 
Main should:
fetch
- read what pc is pointing at
 - a instructions is 2 bytes so read 2 consecutive bytes
 - increment PC by 2

decode
mask of the first number and switch

execute

00E0 (clear screen)
1NNN (jump)
6XNN (set register VX)
7XNN (add value to register VX)
ANNN (set index register I)
DXYN (display/draw)


Font sprite 050-09F
0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
0x20, 0x60, 0x20, 0x20, 0x70, // 1
0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
0x90, 0x90, 0xF0, 0x10, 0x10, // 4
0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
0xF0, 0x10, 0x20, 0x40, 0x40, // 7
0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
0xF0, 0x90, 0xF0, 0x90, 0x90, // A
0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
0xF0, 0x80, 0x80, 0x80, 0xF0, // C
0xE0, 0x90, 0x90, 0x90, 0xE0, // D
0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
0xF0, 0x80, 0xF0, 0x80, 0x80  // F

*/

#include "chip8.h"
#include <cstdint>
#include <vector>
#include <array>
#include <sstream>
#include <iostream>
#include "opparser.h"
#include "SdlDrawer.h"

uint16_t hexToDec(const uint16_t hex)
{
    std::stringstream stream;
    stream << hex;
    uint16_t decimal;
    stream >> std::hex >> decimal;
    return decimal;
}

int main()
{
    OpParser opParser{};
    SdlDrawer drawer{};
    Chip8 chip8{opParser, drawer};
    std::array<uint16_t, 68> opCodes {0x00e0,0xa22a, 0x600c, 0x6108, 0xd01f, 0x7009,0xa239, 0xd01f,
    0xa248, 0x7008, 0xd01f, 0x7004, 0xa257, 0xd01f, 0x7008, 0xa266,  
    0xd01f, 0x7008, 0xa275, 0xd01f, 0x1228, 0xff00, 0xff00, 0x3c00,  
    0x3c00, 0x3c00, 0x3c00, 0xff00, 0xffff, 0x00ff, 0x0038, 0x003f,  
    0x003f, 0x0038, 0x00ff, 0x00ff, 0x8000, 0xe000, 0xe000, 0x8000,  
    0x8000, 0xe000, 0xe000, 0x80f8, 0x00fc, 0x003e, 0x003f, 0x003b,  
    0x0039, 0x00f8, 0x00f8, 0x0300, 0x0700, 0x0f00, 0xbf00, 0xfb00,  
    0xf300, 0xe300, 0x43e0, 0x00e0, 0x0080, 0x0080, 0x0080, 0x0080,
    0x00e0, 0x00e0 };
    for(const auto& op : opCodes)
    {
        chip8.parseOp(op);
    }
}